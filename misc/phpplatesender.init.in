#!/bin/sh
### BEGIN INIT INFO
# Provides:          phpplatesender
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Should-Start:      openalpr-daemon beanstalkd memcached
# Should-Stop:       openalpr-daemon beanstalkd memcached
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: PHP based license plate notifications sender
### END INIT INFO

# Author: Emmanuel Papin <manupap01@gmail.com>

USER="@RUN_USER@"
GROUP="@RUN_GROUP@"
NAME="phpplatesender"
DESC="PHP based license plate notifications sender"
SCRIPTNAME="/etc/init.d/$NAME"
LOGDIR="@LOG_DIR@"
RUNDIR="@RUN_DIR@"
ERRLOG="$LOGDIR/error.log"
PIDFILE="$RUNDIR/phpplatesender.pid"
DAEMON="/usr/bin/php"
DAEMON_ARGS="@DATA_DIR@/worker.php"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	mkdir -p $RUNDIR && chown $USER:$GROUP $RUNDIR
	mkdir -p $LOGDIR && chown $USER:$GROUP $LOGDIR
	start-stop-daemon --start --quiet --background --pidfile $PIDFILE \
		--chuid $USER:$GROUP --exec $DAEMON --test 2> $ERRLOG 2>&1 \
		|| return 1
	start-stop-daemon --start --quiet --background --pidfile $PIDFILE \
		--chuid $USER:$GROUP --exec $DAEMON -- \
		$DAEMON_ARGS 2> $ERRLOG 2>&1\
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
	0|1)
		[ "$VERBOSE" != no ] && log_end_msg 0
		;;
	2)
		[ "$VERBOSE" != no ] && log_end_msg 1
		;;
	esac
	;;
stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
	0|1)
		[ "$VERBOSE" != no ] && log_end_msg 0
		;;
	2)
		[ "$VERBOSE" != no ] && log_end_msg 1
		;;
	esac
	;;
status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	0|1)
		do_start
		case "$?" in
		0)
			log_end_msg 0
			;;
		1)
			# Old process is still running
			log_end_msg 1
			;;
		*)
			# Failed to start
			log_end_msg 1
			;;
		esac
		;;
	*)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
*)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
